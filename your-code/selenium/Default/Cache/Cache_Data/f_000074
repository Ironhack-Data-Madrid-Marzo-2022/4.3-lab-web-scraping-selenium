{"version":3,"sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js"],"names":[],"mappings":"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","file":"5388-xxxxxxxxxxxx.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map"],"sourceRoot":""}